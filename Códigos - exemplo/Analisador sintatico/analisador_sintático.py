# -*- coding: utf-8 -*-
"""Analisador sintático.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yq8gwVndsoi5ohwHahbAAwVxyXjT5PSr
"""

import re

class Parser:
    def __init__(self, input_string):
        # Dividindo a entrada em "tokens" usando regex
        self.tokens = re.findall(r'\d+|[-+]', input_string)
        self.current_token_index = 0

    def parse(self):
        # Inicia a análise da expressão a partir do primeiro token
        result = self.parse_expression()
        # Verifica se todos os tokens foram consumidos corretamente
        if self.current_token_index != len(self.tokens):
            raise SyntaxError("Unexpected tokens after parsing")
        return result

    def parse_expression(self):
        # Parseia os termos iniciais
        left_operand = self.parse_term()
        # Continua enquanto houver tokens '+' ou '-' restantes
        while self.current_token_index < len(self.tokens) and self.tokens[self.current_token_index] in '+-':
            operator = self.tokens[self.current_token_index]
            self.current_token_index += 1
            # Parseia o próximo termo
            right_operand = self.parse_term()
            # Realiza a adição ou subtração dos termos
            if operator == '+':
                left_operand += right_operand
            else:
                left_operand -= right_operand
        return left_operand

    def parse_term(self):
        # Verifica se há mais tokens para parsear
        if self.current_token_index < len(self.tokens):
            # Obtém o token atual
            token = self.tokens[self.current_token_index]
            self.current_token_index += 1
            try:
                # Tenta converter o token em um número inteiro
                return int(token)
            except ValueError:
                # Se o token não puder ser convertido para inteiro, gera erro de sintaxe
                raise SyntaxError("Invalid token: {}".format(token))

if __name__ == "__main__":
    # Solicita ao usuário para digitar uma expressão
    input_string = input("Digite uma expressão matemática (somente números inteiros, '+' e '-'): ")
    # Inicializa o analisador com a entrada fornecida
    parser = Parser(input_string)
    try:
        # Tenta analisar e calcular o resultado da expressão
        result = parser.parse()
        print("Resultado:", result)
    except SyntaxError as e:
        # Em caso de erro de sintaxe, exibe a mensagem de erro
        print("Erro de sintaxe:", e)

